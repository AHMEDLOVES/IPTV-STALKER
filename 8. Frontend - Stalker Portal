<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPTV Stalker Portal</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Login Page */
        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .login-box {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            width: 400px;
        }

        .login-box h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 32px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: #fff;
            font-size: 16px;
        }

        .form-group input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .btn {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .error {
            background: rgba(255, 0, 0, 0.3);
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
        }

        /* Portal Page */
        .portal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .portal-header h1 {
            font-size: 28px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logout-btn {
            padding: 8px 20px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: #fff;
            cursor: pointer;
        }

        .portal-content {
            display: grid;
            grid-template-columns: 250px 1fr;
            gap: 20px;
        }

        /* Sidebar */
        .sidebar {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 20px;
            height: fit-content;
        }

        .sidebar h3 {
            margin-bottom: 15px;
            font-size: 18px;
        }

        .category-list {
            list-style: none;
        }

        .category-item {
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .category-item:hover,
        .category-item.active {
            background: rgba(255, 255, 255, 0.2);
        }

        /* Channel Grid */
        .main-content {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            padding: 20px;
        }

        .search-box {
            margin-bottom: 20px;
        }

        .search-box input {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: #fff;
            font-size: 16px;
        }

        .channel-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
        }

        .channel-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            cursor: pointer;
            transition: transform 0.2s, background 0.2s;
            text-align: center;
        }

        .channel-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.2);
        }

        .channel-logo {
            width: 100%;
            height: 120px;
            object-fit: contain;
            margin-bottom: 10px;
            border-radius: 8px;
        }

        .channel-name {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .channel-epg {
            font-size: 12px;
            color: rgba(255, 255, 255, 0.7);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        /* Video Player */
        .video-player {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            display: none;
            z-index: 1000;
        }

        .video-player.active {
            display: block;
        }

        .player-container {
            position: relative;
            width: 100%;
            height: 100%;
        }

        #videoElement {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .player-controls {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            padding: 20px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .close-player {
            position: absolute;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: #fff;
            cursor: pointer;
            font-size: 16px;
        }

        .epg-info {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 8px;
            max-width: 400px;
        }

        .epg-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .epg-time {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 10px;
        }

        .epg-description {
            font-size: 14px;
            line-height: 1.4;
        }

        .loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 24px;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Login Page -->
    <div id="loginPage" class="login-container">
        <div class="login-box">
            <h1>IPTV Stalker Portal</h1>
            <div id="loginError" class="error hidden"></div>
            <form id="loginForm">
                <div class="form-group">
                    <label>Username / MAC Address</label>
                    <input type="text" id="username" placeholder="Enter username or MAC" required>
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <input type="password" id="password" placeholder="Enter password">
                </div>
                <button type="submit" class="btn">Login</button>
            </form>
        </div>
    </div>

    <!-- Portal Page -->
    <div id="portalPage" class="hidden">
        <div class="container">
            <div class="portal-header">
                <h1>IPTV Stalker Portal</h1>
                <div class="user-info">
                    <span id="userName">Welcome, User</span>
                    <button class="logout-btn" onclick="logout()">Logout</button>
                </div>
            </div>

            <div class="portal-content">
                <div class="sidebar">
                    <h3>Categories</h3>
                    <ul id="categoryList" class="category-list"></ul>
                </div>

                <div class="main-content">
                    <div class="search-box">
                        <input type="text" id="searchInput" placeholder="Search channels...">
                    </div>
                    <div id="channelGrid" class="channel-grid"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Video Player -->
    <div id="videoPlayer" class="video-player">
        <div class="player-container">
            <button class="close-player" onclick="closePlayer()">âœ• Close</button>
            
            <div id="epgInfo" class="epg-info hidden">
                <div class="epg-title" id="epgTitle"></div>
                <div class="epg-time" id="epgTime"></div>
                <div class="epg-description" id="epgDescription"></div>
            </div>

            <video id="videoElement" controls autoplay></video>
        </div>
    </div>

    <div id="loading" class="loading hidden">Loading...</div>

    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script>
        // API Configuration
        const API_BASE = 'http://localhost/iptv-stalker/backend/php/api';
        let authToken = localStorage.getItem('authToken');
        let currentUser = null;
        let channels = [];
        let categories = [];
        let currentPlayer = null;
        let currentSession = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            if (authToken) {
                loadPortal();
            } else {
                showLogin();
            }
        });

        // Login
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            showLoading();
            
            try {
                const response = await fetch(`${API_BASE}/auth.php?action=login`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({username, password})
                });
                
                const data = await response.json();
                
                if (data.success) {
                    authToken = data.token;
                    localStorage.setItem('authToken', authToken);
                    localStorage.setItem('refreshToken', data.refresh_token);
                    currentUser = data;
                    loadPortal();
                } else {
                    showError(data.error);
                }
            } catch (error) {
                showError('Login failed. Please try again.');
            } finally {
                hideLoading();
            }
        });

        // Load Portal
        async function loadPortal() {
            document.getElementById('loginPage').classList.add('hidden');
            document.getElementById('portalPage').classList.remove('hidden');
            
            if (currentUser) {
                document.getElementById('userName').textContent = `Welcome, ${currentUser.username}`;
            }
            
            await Promise.all([
                loadCategories(),
                loadChannels()
            ]);
        }

        // Load Categories
        async function loadCategories() {
            try {
                const response = await fetch(`${API_BASE}/channels.php?action=categories`, {
                    headers: {'Authorization': `Bearer ${authToken}`}
                });
                
                const data = await response.json();
                
                if (data.success) {
                    categories = data.categories;
                    renderCategories();
                }
            } catch (error) {
                console.error('Failed to load categories:', error);
            }
        }

        // Render Categories
        function renderCategories() {
            const list = document.getElementById('categoryList');
            list.innerHTML = '<li class="category-item active" onclick="filterByCategory(null)">All Channels</li>';
            
            categories.forEach(cat => {
                const li = document.createElement('li');
                li.className = 'category-item';
                li.textContent = cat.name;
                li.onclick = () => filterByCategory(cat.id);
                list.appendChild(li);
            });
        }

        // Load Channels
        async function loadChannels(categoryId = null) {
            showLoading();
            
            try {
                let url = `${API_BASE}/channels.php?action=list`;
                if (categoryId) url += `&category=${categoryId}`;
                
                const response = await fetch(url, {
                    headers: {'Authorization': `Bearer ${authToken}`}
                });
                
                const data = await response.json();
                
                if (data.success) {
                    channels = data.channels;
                    renderChannels(channels);
                }
            } catch (error) {
                console.error('Failed to load channels:', error);
            } finally {
                hideLoading();
            }
        }

        // Render Channels
        function renderChannels(channelList) {
            const grid = document.getElementById('channelGrid');
            grid.innerHTML = '';
            
            channelList.forEach(channel => {
                const card = document.createElement('div');
                card.className = 'channel-card';
                card.onclick = () => playChannel(channel.id);
                
                card.innerHTML = `
                    <img src="${channel.logo_url || 'placeholder.png'}" 
                         class="channel-logo" 
                         alt="${channel.name}">
                    <div class="channel-name">${channel.name}</div>
                    <div class="channel-epg" id="epg-${channel.id}">Loading...</div>
                `;
                
                grid.appendChild(card);
                
                // Load current EPG
                loadChannelEPG(channel.id);
            });
        }

        // Load Channel EPG
        async function loadChannelEPG(channelId) {
            try {
                const response = await fetch(
                    `${API_BASE}/epg.php?action=current&channel=${channelId}`,
                    {headers: {'Authorization': `Bearer ${authToken}`}}
                );
                
                const data = await response.json();
                
                if (data.success && data.programme) {
                    const epgElement = document.getElementById(`epg-${channelId}`);
                    if (epgElement) {
                        epgElement.textContent = data.programme.title;
                    }
                }
            } catch (error) {
                console.error('Failed to load EPG:', error);
            }
        }

        // Play Channel
        async function playChannel(channelId) {
            showLoading();
            
            try {
                const response = await fetch(
                    `${API_BASE}/channels.php?action=stream&channel=${channelId}`,
                    {headers: {'Authorization': `Bearer ${authToken}`}}
                );
                
                const data = await response.json();
                
                if (data.success) {
                    currentSession = data.session_token;
                    openPlayer(data.stream_url, channelId);
                    loadPlayerEPG(channelId);
                } else {
                    alert(data.error);
                }
            } catch (error) {
                alert('Failed to start stream');
            } finally {
                hideLoading();
            }
        }

        // Open Player
        function openPlayer(streamUrl, channelId) {
            const videoPlayer = document.getElementById('videoPlayer');
            const videoElement = document.getElementById('videoElement');
            
            videoPlayer.classList.add('active');
            
            // Check if HLS
            if (streamUrl.includes('.m3u8')) {
                if (Hls.isSupported()) {
                    if (currentPlayer) {
                        currentPlayer.destroy();
                    }
                    
                    currentPlayer = new Hls();
                    currentPlayer.loadSource(streamUrl);
                    currentPlayer.attachMedia(videoElement);
                    
                    currentPlayer.on(Hls.Events.MANIFEST_PARSED, () => {
                        videoElement.play();
                    });
                } else if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {
                    videoElement.src = streamUrl;
                    videoElement.addEventListener('loadedmetadata', () => {
                        videoElement.play();
                    });
                }
            } else {
                videoElement.src = streamUrl;
                videoElement.play();
            }
        }

        // Load Player EPG
        async function loadPlayerEPG(channelId) {
            try {
                const response = await fetch(
                    `${API_BASE}/epg.php?action=current&channel=${channelId}`,
                    {headers: {'Authorization': `Bearer ${authToken}`}}
                );
                
                const data = await response.json();
                
                if (data.success && data.programme) {
                    const epgInfo = document.getElementById('epgInfo');
                    document.getElementById('epgTitle').textContent = data.programme.title;
                    document.getElementById('epgTime').textContent = 
                        `${data.programme.start_time} - ${data.programme.end_time}`;
                    document.getElementById('epgDescription').textContent = 
                        data.programme.description || '';
                    epgInfo.classList.remove('hidden');
                }
            } catch (error) {
                console.error('Failed to load player EPG:', error);
            }
        }

        // Close Player
        async function closePlayer() {
            const videoPlayer = document.getElementById('videoPlayer');
            const videoElement = document.getElementById('videoElement');
            
            videoPlayer.classList.remove('active');
            videoElement.pause();
            videoElement.src = '';
            
            if (currentPlayer) {
                currentPlayer.destroy();
                currentPlayer = null;
            }
            
            // End session
            if (currentSession) {
                await fetch(`${API_BASE}/channels.php?action=end_session`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({session_token: currentSession})
                });
                currentSession = null;
            }
        }

        // Filter by Category
        function filterByCategory(categoryId) {
            document.querySelectorAll('.category-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.classList.add('active');
            
            loadChannels(categoryId);
        }

        // Search Channels
        document.getElementById('searchInput').addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filtered = channels.filter(channel => 
                channel.name.toLowerCase().includes(searchTerm)
            );
            renderChannels(filtered);
        });

        // Logout
        function logout() {
            localStorage.removeItem('authToken');
            localStorage.removeItem('refreshToken');
            authToken = null;
            currentUser = null;
            showLogin();
        }

        // Show Login
        function showLogin() {
            document.getElementById('portalPage').classList.add('hidden');
            document.getElementById('loginPage').classList.remove('hidden');
        }

        // Helper Functions
        function showLoading() {
            document.getElementById('loading').classList.remove('hidden');
        }

        function hideLoading() {
            document.getElementById('loading').classList.add('hidden');
        }

        function showError(message) {
            const errorDiv = document.getElementById('loginError');
            errorDiv.textContent = message;
            errorDiv.classList.remove('hidden');
            setTimeout(() => errorDiv.classList.add('hidden'), 5000);
        }
    </script>
</body>
</html>
